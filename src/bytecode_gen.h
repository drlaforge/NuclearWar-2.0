/* This file was generated by "./mk_bytecode_gen.sh". DO NOT EDIT! */

/* Bytecode access functions for uint8_t */
static INLINE uint8_t get_uint8(bytecode_p p)
{
    uint8_t c;
    c = *(uint8_t *)p; /* or: memcpy(&c, p, sizeof(c)); */
    return c;
}

static INLINE uint8_t put_uint8(bytecode_p p, uint8_t c)
{
    *(uint8_t *)p = c; /* or: memcpy(p, &c, sizeof(c)); */
    return c;
}

static INLINE uint8_t load_uint8(bytecode_p *p)
{
    uint8_t c = get_uint8(*p);
    *p += sizeof(c);
    return c;
}

static INLINE uint8_t store_uint8(bytecode_p *p, uint8_t c)
{
    put_uint8(*p, c);
    *p += sizeof(c);
    return c;
}

static INLINE uint8_t rstore_uint8(bytecode_p *p, uint8_t c)
{
    *p -= sizeof(c);
    put_uint8(*p, c);
    return c;
}


/* Bytecode access functions for uint16_t */
static INLINE uint16_t get_uint16(bytecode_p p)
{
    uint16_t c;
    c = *(uint16_t *)p; /* or: memcpy(&c, p, sizeof(c)); */
    return c;
}

static INLINE uint16_t put_uint16(bytecode_p p, uint16_t c)
{
    *(uint16_t *)p = c; /* or: memcpy(p, &c, sizeof(c)); */
    return c;
}

static INLINE uint16_t load_uint16(bytecode_p *p)
{
    uint16_t c = get_uint16(*p);
    *p += sizeof(c);
    return c;
}

static INLINE uint16_t store_uint16(bytecode_p *p, uint16_t c)
{
    put_uint16(*p, c);
    *p += sizeof(c);
    return c;
}

static INLINE uint16_t rstore_uint16(bytecode_p *p, uint16_t c)
{
    *p -= sizeof(c);
    put_uint16(*p, c);
    return c;
}


/* Bytecode access functions for uint32_t */
static INLINE uint32_t get_uint32(bytecode_p p)
{
    uint32_t c;
    c = *(uint32_t *)p; /* or: memcpy(&c, p, sizeof(c)); */
    return c;
}

static INLINE uint32_t put_uint32(bytecode_p p, uint32_t c)
{
    *(uint32_t *)p = c; /* or: memcpy(p, &c, sizeof(c)); */
    return c;
}

static INLINE uint32_t load_uint32(bytecode_p *p)
{
    uint32_t c = get_uint32(*p);
    *p += sizeof(c);
    return c;
}

static INLINE uint32_t store_uint32(bytecode_p *p, uint32_t c)
{
    put_uint32(*p, c);
    *p += sizeof(c);
    return c;
}

static INLINE uint32_t rstore_uint32(bytecode_p *p, uint32_t c)
{
    *p -= sizeof(c);
    put_uint32(*p, c);
    return c;
}


/* Bytecode access functions for unsigned short */
static INLINE unsigned short get_short(bytecode_p p)
{
    unsigned short c;
    c = *(unsigned short *)p; /* or: memcpy(&c, p, sizeof(c)); */
    return c;
}

static INLINE unsigned short put_short(bytecode_p p, unsigned short c)
{
    *(unsigned short *)p = c; /* or: memcpy(p, &c, sizeof(c)); */
    return c;
}

static INLINE unsigned short load_short(bytecode_p *p)
{
    unsigned short c = get_short(*p);
    *p += sizeof(c);
    return c;
}

static INLINE unsigned short store_short(bytecode_p *p, unsigned short c)
{
    put_short(*p, c);
    *p += sizeof(c);
    return c;
}

static INLINE unsigned short rstore_short(bytecode_p *p, unsigned short c)
{
    *p -= sizeof(c);
    put_short(*p, c);
    return c;
}


/* Bytecode access functions for bytecode_t */
static INLINE bytecode_t get_code(bytecode_p p)
{
    bytecode_t c;
    c = *(bytecode_t *)p; /* or: memcpy(&c, p, sizeof(c)); */
    return c;
}

static INLINE bytecode_t put_code(bytecode_p p, bytecode_t c)
{
    *(bytecode_t *)p = c; /* or: memcpy(p, &c, sizeof(c)); */
    return c;
}

static INLINE bytecode_t load_code(bytecode_p *p)
{
    bytecode_t c = get_code(*p);
    *p += sizeof(c);
    return c;
}

static INLINE bytecode_t store_code(bytecode_p *p, bytecode_t c)
{
    put_code(*p, c);
    *p += sizeof(c);
    return c;
}

static INLINE bytecode_t rstore_code(bytecode_p *p, bytecode_t c)
{
    *p -= sizeof(c);
    put_code(*p, c);
    return c;
}


/* Bytecode access functions for bc_offset_t */
static INLINE bc_offset_t get_bc_offset(bytecode_p p)
{
    bc_offset_t c;
    c = *(bc_offset_t *)p; /* or: memcpy(&c, p, sizeof(c)); */
    return c;
}

static INLINE bc_offset_t put_bc_offset(bytecode_p p, bc_offset_t c)
{
    *(bc_offset_t *)p = c; /* or: memcpy(p, &c, sizeof(c)); */
    return c;
}

static INLINE bc_offset_t load_bc_offset(bytecode_p *p)
{
    bc_offset_t c = get_bc_offset(*p);
    *p += sizeof(c);
    return c;
}

static INLINE bc_offset_t store_bc_offset(bytecode_p *p, bc_offset_t c)
{
    put_bc_offset(*p, c);
    *p += sizeof(c);
    return c;
}

static INLINE bc_offset_t rstore_bc_offset(bytecode_p *p, bc_offset_t c)
{
    *p -= sizeof(c);
    put_bc_offset(*p, c);
    return c;
}


/* Bytecode access functions for bc_shortoffset_t */
static INLINE bc_shortoffset_t get_bc_shortoffset(bytecode_p p)
{
    bc_shortoffset_t c;
    c = *(bc_shortoffset_t *)p; /* or: memcpy(&c, p, sizeof(c)); */
    return c;
}

static INLINE bc_shortoffset_t put_bc_shortoffset(bytecode_p p, bc_shortoffset_t c)
{
    *(bc_shortoffset_t *)p = c; /* or: memcpy(p, &c, sizeof(c)); */
    return c;
}

static INLINE bc_shortoffset_t load_bc_shortoffset(bytecode_p *p)
{
    bc_shortoffset_t c = get_bc_shortoffset(*p);
    *p += sizeof(c);
    return c;
}

static INLINE bc_shortoffset_t store_bc_shortoffset(bytecode_p *p, bc_shortoffset_t c)
{
    put_bc_shortoffset(*p, c);
    *p += sizeof(c);
    return c;
}

static INLINE bc_shortoffset_t rstore_bc_shortoffset(bytecode_p *p, bc_shortoffset_t c)
{
    *p -= sizeof(c);
    put_bc_shortoffset(*p, c);
    return c;
}


/* Bytecode access functions for double */
static INLINE double get_double(bytecode_p p)
{
    double c;
    c = *(double *)p; /* or: memcpy(&c, p, sizeof(c)); */
    return c;
}

static INLINE double put_double(bytecode_p p, double c)
{
    *(double *)p = c; /* or: memcpy(p, &c, sizeof(c)); */
    return c;
}

static INLINE double load_double(bytecode_p *p)
{
    double c = get_double(*p);
    *p += sizeof(c);
    return c;
}

static INLINE double store_double(bytecode_p *p, double c)
{
    put_double(*p, c);
    *p += sizeof(c);
    return c;
}

static INLINE double rstore_double(bytecode_p *p, double c)
{
    *p -= sizeof(c);
    put_double(*p, c);
    return c;
}

